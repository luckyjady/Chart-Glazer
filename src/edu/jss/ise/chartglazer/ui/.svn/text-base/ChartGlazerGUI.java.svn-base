/**
This file is part of Chart Glazer.

Chart Glazer is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Chart Glazer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Chart Glazer.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.jss.ise.chartglazer.ui;

import edu.jss.ise.chartglazer.data.input.RawInputData;
import edu.jss.ise.chartglazer.control.Glazer;
import edu.jss.ise.chartglazer.data.input.AppearanceInputData;
import edu.jss.ise.chartglazer.data.output.SVGDocumentData;
import edu.jss.ise.chartglazer.shared.CGLogger;
import edu.jss.ise.chartglazer.shared.DiagramTypesHashMap;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.batik.dom.util.DOMUtilities;
import org.apache.batik.swing.JSVGCanvas;
import org.w3c.dom.Element;

/**
 * This the main front-end of Chart Glazer.
 * @author rishabh
 */
public class ChartGlazerGUI extends javax.swing.JFrame
{
	/**
	 * This object is the point-of-contact between the frontend and backend.
	 */
	protected Glazer glazer;
	/**
	 * This contains the drawn-in-memory diagram. The <code>Document</code> from this object will be given to the <code>JSVGCanvas</code> object.
	 */
	protected SVGDocumentData outputDiagram;

	/** Creates new form ChartGlazerGUI */
	public ChartGlazerGUI()
	{
		// setup the loggin APIs
		CGLogger.setupLoggingAPI();

		// create the HashMap of the diagram types.
		DiagramTypesHashMap.setupDiagramTypesHashMap();

		// change the look and feel, this must be done before initComponents()
		try
		{
			for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch (UnsupportedLookAndFeelException e)
		{
			// handle exception
		}
		catch (ClassNotFoundException e)
		{
			// handle exception
		}
		catch (InstantiationException e)
		{
			// handle exception
		}
		catch (IllegalAccessException e)
		{
			// handle exception
		}

		// initialize components
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveOutputDiagramJFileChooser = new javax.swing.JFileChooser();
        generateButton = new javax.swing.JButton();
        appearanceJInternalFrame = new javax.swing.JInternalFrame();
        //Load the diagram type images
        java.lang.String[] diagramTypeImages = { "Basic Process", "Vertical Process", "Hierarchy", "Basic Block List", "Converging Radial", "Nondirectional Cycle" };
        javax.swing.ImageIcon images[] = new javax.swing.ImageIcon[diagramTypeImages.length];

        for (int i = 0; i < diagramTypeImages.length; i++)
        {
            images[i] = new javax.swing.ImageIcon(ClassLoader.getSystemResource("edu/jss/ise/chartglazer/resources/" + diagramTypeImages[i] + ".png"));

            images[i].setDescription(diagramTypeImages[i]);
        }
        diagramTypeComboBox = new javax.swing.JComboBox(images);
        diagramTypeJLabel = new javax.swing.JLabel();
        javax.swing.SpinnerModel diagramDimensionsHeightSpinnerModel = new javax.swing.SpinnerNumberModel(480, 100, 32000, 50);
        diagramHeightSpinner = new javax.swing.JSpinner(diagramDimensionsHeightSpinnerModel);
        javax.swing.SpinnerModel diagramDimensionsWidthSpinnerModel = new javax.swing.SpinnerNumberModel(640, 100, 32000, 50);
        diagramWidthSpinner = new javax.swing.JSpinner(diagramDimensionsWidthSpinnerModel);
        diagramDimensionsJLabel = new javax.swing.JLabel();
        diagramDimensionsWidthJLabel = new javax.swing.JLabel();
        diagramDimensionsHeightJLabel = new javax.swing.JLabel();
        fontSelectionJLabel = new javax.swing.JLabel();
        fontSelectionJComboBox = new javax.swing.JComboBox();
        taskBackgroundColorBlend1JButton = new javax.swing.JButton();
        nodeJLabel = new javax.swing.JLabel();
        taskBorderColorJLabel = new javax.swing.JLabel();
        taskBorderColorJButton = new javax.swing.JButton();
        fontColorJLabel = new javax.swing.JLabel();
        fontColorJButton = new javax.swing.JButton();
        javax.swing.SpinnerModel fontSizeSpinnerModel = new javax.swing.SpinnerNumberModel(24, 1, 60, 1);
        fontSizeJSpinner = new javax.swing.JSpinner(fontSizeSpinnerModel);
        fontSizeJLabel = new javax.swing.JLabel();
        taskBackgroundColorBlend2JButton = new javax.swing.JButton();
        nodeBackgroundBlendAndJLabel = new javax.swing.JLabel();
        fontFaceJLabel = new javax.swing.JLabel();
        blendJLabel = new javax.swing.JLabel();
        borderColorJLabel = new javax.swing.JLabel();
        borderStrokeWidthJLabel = new javax.swing.JLabel();
        javax.swing.SpinnerModel borderStrokeWidthSpinnerModel = new javax.swing.SpinnerNumberModel(5, 1, 50, 0.1);
        borderStrokeWidthJSpinner = new javax.swing.JSpinner(borderStrokeWidthSpinnerModel);
        inputTreeJInternalFrame = new javax.swing.JInternalFrame();
        deleteButton = new javax.swing.JButton();
        addChildButton = new javax.swing.JButton();
        inputTreeScrollPane = new javax.swing.JScrollPane();
        inputTree = new javax.swing.JTree();
        addSiblingJButton = new javax.swing.JButton();
        outputSVGJInternalFrame = new javax.swing.JInternalFrame();
        svgOutputScrollPane = new javax.swing.JScrollPane();
        outputDiagramJSVGCanvas = new org.apache.batik.swing.JSVGCanvas();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chart Glazer");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("chartGlazerFrame"); // NOI18N

        generateButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
        generateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/tools-wizard.png"))); // NOI18N
        generateButton.setText("Generate Diagram");
        generateButton.setToolTipText("Generate the diagram using the above input specifications. The output SVG may take some time to draw.");
        generateButton.setPreferredSize(new java.awt.Dimension(455, 25));
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDiagram(evt);
            }
        });

        appearanceJInternalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        appearanceJInternalFrame.setTitle("Diagram Properties");
        appearanceJInternalFrame.setToolTipText("Change the appearance of the diagram by changing various available settings.");
        appearanceJInternalFrame.setAutoscrolls(true);
        appearanceJInternalFrame.setName("appearanceJInternalFrame"); // NOI18N
        appearanceJInternalFrame.setVisible(true);

        edu.jss.ise.chartglazer.ui.ComboBoxRenderer diagramTypeRenderer = new edu.jss.ise.chartglazer.ui.ComboBoxRenderer();
        diagramTypeRenderer.setPreferredSize(new Dimension(150, 100));
        diagramTypeComboBox.setRenderer(diagramTypeRenderer);
        diagramTypeComboBox.setMaximumRowCount(3);
        diagramTypeComboBox.setToolTipText("Select a diagram type to be drawn from a host of available diagram type.");

        diagramTypeJLabel.setFont(diagramTypeJLabel.getFont().deriveFont(diagramTypeJLabel.getFont().getStyle() | java.awt.Font.BOLD));
        diagramTypeJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/promotion.png"))); // NOI18N
        diagramTypeJLabel.setText("Type:");

        diagramHeightSpinner.setToolTipText("The height of the SVG canvas. The diagram will scale and fit appropriately according to this value.");
        diagramHeightSpinner.setMinimumSize(new java.awt.Dimension(40, 28));

        diagramWidthSpinner.setToolTipText("The width of the SVG canvas. The diagram will scale and fit appropriately according to this value.");
        diagramWidthSpinner.setMinimumSize(new java.awt.Dimension(40, 20));

        diagramDimensionsJLabel.setFont(diagramDimensionsJLabel.getFont().deriveFont(diagramDimensionsJLabel.getFont().getStyle() | java.awt.Font.BOLD));
        diagramDimensionsJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/games.png"))); // NOI18N
        diagramDimensionsJLabel.setText("Dimensions:");

        diagramDimensionsWidthJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/next.png"))); // NOI18N
        diagramDimensionsWidthJLabel.setText("Width:");

        diagramDimensionsHeightJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/up.png"))); // NOI18N
        diagramDimensionsHeightJLabel.setText("Height:");

        fontSelectionJLabel.setFont(fontSelectionJLabel.getFont().deriveFont(fontSelectionJLabel.getFont().getStyle() | java.awt.Font.BOLD));
        fontSelectionJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/font.jpg"))); // NOI18N
        fontSelectionJLabel.setText("Font:");

        GraphicsEnvironment gEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String envfonts[] = gEnv.getAvailableFontFamilyNames();
        java.util.Vector allFontsVector = new java.util.Vector();
        for (int i = 1; i < envfonts.length; i++)
        {
            allFontsVector.addElement(envfonts[i]);
        }
        javax.swing.DefaultComboBoxModel allFontsDefaultComboBoxModel = new javax.swing.DefaultComboBoxModel(allFontsVector);
        fontSelectionJComboBox.setModel(allFontsDefaultComboBoxModel);
        fontSelectionJComboBox.setToolTipText("Select the font face which will be used to render the text content in the shapes of the diagram.");

        taskBackgroundColorBlend1JButton.setBackground(new java.awt.Color(255, 153, 51));
        taskBackgroundColorBlend1JButton.setText(" ");
        taskBackgroundColorBlend1JButton.setToolTipText("Select the color which will be used as the fill color for the shapes in the diagram.");
        taskBackgroundColorBlend1JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskBackgroundColorBlend1JButtonActionPerformed(evt);
            }
        });

        nodeJLabel.setFont(nodeJLabel.getFont().deriveFont(nodeJLabel.getFont().getStyle() | java.awt.Font.BOLD));
        nodeJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/package.png"))); // NOI18N
        nodeJLabel.setText("Node:");

        taskBorderColorJLabel.setFont(taskBorderColorJLabel.getFont().deriveFont(taskBorderColorJLabel.getFont().getStyle() | java.awt.Font.BOLD));
        taskBorderColorJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/chart.png"))); // NOI18N
        taskBorderColorJLabel.setText("Border:");

        taskBorderColorJButton.setBackground(new java.awt.Color(153, 153, 153));
        taskBorderColorJButton.setText(" ");
        taskBorderColorJButton.setToolTipText("Select the border color of the shapes in the diagram.");
        taskBorderColorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskBorderColorJButtonActionPerformed(evt);
            }
        });

        fontColorJLabel.setFont(fontColorJLabel.getFont());
        fontColorJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/palette_brush.png"))); // NOI18N
        fontColorJLabel.setText("Color:");

        fontColorJButton.setBackground(new java.awt.Color(51, 51, 51));
        fontColorJButton.setText(" ");
        fontColorJButton.setToolTipText("Select the font color of the text content within the shape in the diagram.");
        fontColorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontColorJButtonActionPerformed(evt);
            }
        });

        fontSizeJSpinner.setToolTipText("Select the font size which will be used to render the text content in the shapes of the diagram.");

        fontSizeJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/ruler_pencil.png"))); // NOI18N
        fontSizeJLabel.setText("Size:");

        taskBackgroundColorBlend2JButton.setBackground(new java.awt.Color(153, 204, 0));
        taskBackgroundColorBlend2JButton.setText(" ");
        taskBackgroundColorBlend2JButton.setToolTipText("Select the color which will be used as the fill color for the shapes in the diagram.");
        taskBackgroundColorBlend2JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskBackgroundColorBlend2JButtonActionPerformed(evt);
            }
        });

        nodeBackgroundBlendAndJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/add.png"))); // NOI18N
        nodeBackgroundBlendAndJLabel.setText("and");

        fontFaceJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/chalk_board.png"))); // NOI18N
        fontFaceJLabel.setText("Face:");

        blendJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/refresh.png"))); // NOI18N
        blendJLabel.setText("Blend:");

        borderColorJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/palette.png"))); // NOI18N
        borderColorJLabel.setText("Color:");

        borderStrokeWidthJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/paint_brush.png"))); // NOI18N
        borderStrokeWidthJLabel.setText("Thickness:");

        javax.swing.GroupLayout appearanceJInternalFrameLayout = new javax.swing.GroupLayout(appearanceJInternalFrame.getContentPane());
        appearanceJInternalFrame.getContentPane().setLayout(appearanceJInternalFrameLayout);
        appearanceJInternalFrameLayout.setHorizontalGroup(
            appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(diagramTypeJLabel)
                    .addComponent(diagramDimensionsJLabel)
                    .addComponent(fontSelectionJLabel)
                    .addComponent(taskBorderColorJLabel)
                    .addComponent(nodeJLabel))
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fontColorJLabel)
                            .addComponent(borderColorJLabel)
                            .addComponent(blendJLabel)
                            .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(diagramDimensionsWidthJLabel)
                                .addComponent(fontFaceJLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                                .addComponent(diagramWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(diagramDimensionsHeightJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(diagramHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fontSelectionJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(taskBorderColorJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(taskBackgroundColorBlend1JButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fontColorJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                                        .addComponent(borderStrokeWidthJLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(borderStrokeWidthJSpinner))
                                    .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                                        .addComponent(nodeBackgroundBlendAndJLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(taskBackgroundColorBlend2JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                                        .addComponent(fontSizeJLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fontSizeJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(diagramTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        appearanceJInternalFrameLayout.setVerticalGroup(
            appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appearanceJInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diagramTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diagramTypeJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diagramDimensionsJLabel)
                    .addComponent(diagramHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diagramDimensionsWidthJLabel)
                    .addComponent(diagramWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diagramDimensionsHeightJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontSelectionJLabel)
                    .addComponent(fontFaceJLabel)
                    .addComponent(fontSelectionJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontColorJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fontColorJLabel)
                    .addComponent(fontSizeJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontSizeJLabel))
                .addGap(10, 10, 10)
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskBackgroundColorBlend1JButton)
                    .addComponent(blendJLabel)
                    .addComponent(nodeJLabel)
                    .addComponent(nodeBackgroundBlendAndJLabel)
                    .addComponent(taskBackgroundColorBlend2JButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(appearanceJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskBorderColorJLabel)
                    .addComponent(borderColorJLabel)
                    .addComponent(taskBorderColorJButton)
                    .addComponent(borderStrokeWidthJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(borderStrokeWidthJLabel))
                .addContainerGap())
        );

        inputTreeJInternalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        inputTreeJInternalFrame.setTitle("Input Tree");
        inputTreeJInternalFrame.setToolTipText("Edit your diagram text content. You can add and delete nodes as required.");
        inputTreeJInternalFrame.setVisible(true);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/delete.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Deletes the currently selected node.");
        deleteButton.setMaximumSize(new java.awt.Dimension(106, 25));
        deleteButton.setMinimumSize(new java.awt.Dimension(106, 25));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addChildButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/users.png"))); // NOI18N
        addChildButton.setText("Add Child");
        addChildButton.setToolTipText("Adds a new node under (child) the currently selected node.");
        addChildButton.setMaximumSize(new java.awt.Dimension(106, 25));
        addChildButton.setMinimumSize(new java.awt.Dimension(106, 25));
        addChildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChildButtonActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultTreeCellRenderer renderer = new javax.swing.tree.DefaultTreeCellRenderer();
        renderer.setLeafIcon(new javax.swing.ImageIcon(ClassLoader.getSystemResource("edu/jss/ise/chartglazer/resources/leaf_icon.png")));
        renderer.setClosedIcon(new javax.swing.ImageIcon(ClassLoader.getSystemResource("edu/jss/ise/chartglazer/resources/treeclosed.jpeg")));
        renderer.setOpenIcon(new javax.swing.ImageIcon(ClassLoader.getSystemResource("edu/jss/ise/chartglazer/resources/treeopen.jpeg")));

        inputTree.setCellRenderer(renderer);
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Chart Glazer");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Welcome!");
        treeNode1.add(treeNode2);
        inputTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        inputTree.setToolTipText("The text content for your diagram will be extracted from this tree.");
        inputTree.setEditable(true);
        inputTree.setSelectionRow(1);
        inputTreeScrollPane.setViewportView(inputTree);

        addSiblingJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/add_user.png"))); // NOI18N
        addSiblingJButton.setText("Add Sibling");
        addSiblingJButton.setToolTipText("Inserts a new node at the same level as the currently selected node.");
        addSiblingJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSiblingJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputTreeJInternalFrameLayout = new javax.swing.GroupLayout(inputTreeJInternalFrame.getContentPane());
        inputTreeJInternalFrame.getContentPane().setLayout(inputTreeJInternalFrameLayout);
        inputTreeJInternalFrameLayout.setHorizontalGroup(
            inputTreeJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputTreeJInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputTreeJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputTreeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputTreeJInternalFrameLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addSiblingJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addChildButton, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
                .addContainerGap())
        );
        inputTreeJInternalFrameLayout.setVerticalGroup(
            inputTreeJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputTreeJInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputTreeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputTreeJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSiblingJButton)
                    .addComponent(addChildButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        outputSVGJInternalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        outputSVGJInternalFrame.setTitle("Output SVG Canvas");
        outputSVGJInternalFrame.setAutoscrolls(true);
        outputSVGJInternalFrame.setVisible(true);

        outputDiagramJSVGCanvas.setToolTipText("<html>The output image is displayed here.<br />To zoom in/out with your mouse, press and hold <b>Shift</b> + <b>Right Click</b>.<br />To zoom in onto a selected region, press and hold <b>Ctrl</b> + <b>Left Click</b> and select the region to zoom.<br />To pan, press and hold <b>Shift</b> + <b>Left Click</b> and pan the image.<br />To rotate the image, press and hold <b>Ctrl</b> + <b>Right Click</b> and move the mouse left or right to rotate the image in the corresponding direction.");
        outputDiagramJSVGCanvas.setAutoscrolls(true);

        javax.swing.GroupLayout outputDiagramJSVGCanvasLayout = new javax.swing.GroupLayout(outputDiagramJSVGCanvas);
        outputDiagramJSVGCanvas.setLayout(outputDiagramJSVGCanvasLayout);
        outputDiagramJSVGCanvasLayout.setHorizontalGroup(
            outputDiagramJSVGCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 815, Short.MAX_VALUE)
        );
        outputDiagramJSVGCanvasLayout.setVerticalGroup(
            outputDiagramJSVGCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 705, Short.MAX_VALUE)
        );

        svgOutputScrollPane.setViewportView(outputDiagramJSVGCanvas);

        javax.swing.GroupLayout outputSVGJInternalFrameLayout = new javax.swing.GroupLayout(outputSVGJInternalFrame.getContentPane());
        outputSVGJInternalFrame.getContentPane().setLayout(outputSVGJInternalFrameLayout);
        outputSVGJInternalFrameLayout.setHorizontalGroup(
            outputSVGJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputSVGJInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(svgOutputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                .addContainerGap())
        );
        outputSVGJInternalFrameLayout.setVerticalGroup(
            outputSVGJInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputSVGJInternalFrameLayout.createSequentialGroup()
                .addComponent(svgOutputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        fileMenu.setText("File");
        fileMenu.setToolTipText("Displays options to save and quit.");

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/save.png"))); // NOI18N
        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.setToolTipText("Saves the SVG image to your hard-drive.");
        saveAsMenuItem.setEnabled(false);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/trash_can.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Quits Chart Glazer and returns back to your desktop.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/jss/ise/chartglazer/resources/info.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.setToolTipText("Displays info about the developers of this application and some licence stuff.");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(appearanceJInternalFrame)
                    .addComponent(inputTreeJInternalFrame)
                    .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputSVGJInternalFrame)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputSVGJInternalFrame, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputTreeJInternalFrame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appearanceJInternalFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
		System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

	/**
	 * This helper class will coordinate the results between the backend and the front end.
	 */
	private class GlazerScheduler extends SwingWorker<Void, Void>
	{
		/**
		 * Takes values from all the UI components and sets up the input information.
		 * @param inputSpecs A reference to the inputSpecs object from the <code>generateDiagram</code> function.
		 */
		private void setupRawInput(RawInputData inputSpecs, AppearanceInputData appearanceSpecs)
		{
			CGLogger.trace("Setting up RawInputData inputSpecs...");

			// setup diagram dimensions
			inputSpecs.setDiagramDimensions(new Dimension((Integer) diagramWidthSpinner.getValue(), (Integer) diagramHeightSpinner.getValue()));
			outputDiagram.getGenerator().setSVGCanvasSize(inputSpecs.getDiagramDimensions());

			// setup diagram type
			ImageIcon selectedDiagramTypeImageIcon = (ImageIcon) diagramTypeComboBox.getSelectedItem();
			inputSpecs.setDiagramType(DiagramTypesHashMap.getValue(selectedDiagramTypeImageIcon.getDescription()));

			// setup the JTree tree model
			inputTree.setRootVisible(true);
			TreeModel inputTreeModel = inputTree.getModel();
			DefaultMutableTreeNode inputTreeRoot = new DefaultMutableTreeNode();
			inputTreeRoot = (DefaultMutableTreeNode) inputTreeModel.getRoot();
			inputSpecs.setInputDiagram(inputTreeRoot);

			appearanceSpecs.setTextFont((String) fontSelectionJComboBox.getSelectedItem(), Font.PLAIN, (Integer) fontSizeJSpinner.getValue());
			appearanceSpecs.setTaskBackgroundBlend1Color(taskBackgroundColorBlend1JButton.getBackground());
			appearanceSpecs.setTaskBackgroundBlend2Color(taskBackgroundColorBlend2JButton.getBackground());
			appearanceSpecs.setTaskBorderColor(taskBorderColorJButton.getBackground());
			appearanceSpecs.setFontColor(fontColorJButton.getBackground());
			appearanceSpecs.setBorderStrokeWidth((Double) borderStrokeWidthJSpinner.getValue());
		}

		/**
		 * Allocates memory for <code>glazer</code>.
		 */
		public GlazerScheduler() throws ParserConfigurationException
		{
			// create a new Glazer object and give it the JSVGCanvas object, it'll refresh it on it's own!
			glazer = new Glazer();
			outputDiagram = new SVGDocumentData();
		}

		/**
		 * Takes the input data and schedules the background <code>SwingWorker</code> thread for execution.
		 */
		public void startDiagramProcessing() throws Exception
		{
			CGLogger.trace("Starting diagram processing...");
			// this is where all the input details sit
			RawInputData inputSpecs = new RawInputData();

			AppearanceInputData appearanceSpecs = new AppearanceInputData();

			// fill up the RawInputData object, inputSpecs, with all the details
			// TODO fill up inputSpecs completely and send
			this.setupRawInput(inputSpecs, appearanceSpecs);

			// now send the RawInputData object, inputSpecs, to the backbone, Glazer object, glazer, and start the processing
			glazer.returnBackWithRawInput(inputSpecs, appearanceSpecs);

			// execute the SwingWorker thread, Glazer object, glazer.
			this.execute();
		}

		/**
		 * Simply calls upon <code>Glazer</code> to start the processing of the diagram.
		 * @return Void
		 * @throws Exception
		 */
		@Override
		protected Void doInBackground() throws MalformedURLException, IOException
		{
			CGLogger.trace("Calling glazer.startGlazing()...");

			try
			{
				glazer.startGlazing(outputDiagram);
			}
			catch (Exception ex)
			{
				CGLogger.trace(Level.SEVERE, ex.toString());
				final JEditorPane editorPane = new JEditorPane();
				editorPane.setPreferredSize(new Dimension(640, 300));
				editorPane.setEditable(false);
				editorPane.setContentType("text/html");

				editorPane.setText("<html><body>"
						+ "<h1>Uh oh! This is embarrassing!</h1><h2>It appears that we ran into some unexpected trouble!</h2>"
						+ "<p>The details about the error are as follows:</p>"
						+ "<h3>" + ex.toString() + "</h3>"
						+ "<p>You can help us improve Chart Glazer by reporting this error. Please visit <a href='http://kenai.com/bugzilla/buglist.cgi?product=chartglazer&order=Importance&limit=25'>our project Bugzilla website</a> and report the error.</p>"
						+ "<p>Alternatively, you can contact us via <a href='http://kenai.com/projects/chartglazer/forums/message-forum'>our project message forum</a> and we will surely help you out!"
						+ "<p>We are extremely sorry for the inconvenience caused!</p>"
						+ "</body></html>");

				// Add Hyperlink listener to process hyperlinks
				editorPane.addHyperlinkListener(new HyperlinkListener()
				{
					public void hyperlinkUpdate(final HyperlinkEvent e)
					{
						if (e.getEventType() == HyperlinkEvent.EventType.ENTERED)
						{
							EventQueue.invokeLater(new Runnable()
							{
								public void run()
								{
									// Show hand cursor
									SwingUtilities.getWindowAncestor(editorPane).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
									// Show URL as the tooltip
									editorPane.setToolTipText(e.getURL().toExternalForm());
								}
							});
						}
						else if (e.getEventType() == HyperlinkEvent.EventType.EXITED)
						{
							EventQueue.invokeLater(new Runnable()
							{
								public void run()
								{
									// Show default cursor
									SwingUtilities.getWindowAncestor(editorPane).setCursor(Cursor.getDefaultCursor());

									// Reset tooltip
									editorPane.setToolTipText(null);
								}
							});
						}
						else if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
						{
							// Starting with JDK6 you can show the URL in desktop browser
							if (Desktop.isDesktopSupported())
							{
								try
								{
									Desktop.getDesktop().browse(e.getURL().toURI());
								}
								catch (Exception ex)
								{
									CGLogger.trace(Level.WARNING, ex.toString());
								}
							}
						}
					}
				});

				editorPane.setCaretPosition(0);
				JOptionPane.showMessageDialog(rootPane, new JScrollPane(editorPane), "Chart Glazer: Oops! You just got bugged!", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(ClassLoader.getSystemResource("edu/jss/ise/chartglazer/resources/Bug.png")));


			}

			return null;
		}

		/**
		 * After the processing is finished, perform post-processing work.
		 */
		@Override
		protected void done()
		{
			CGLogger.trace("Completed processing diagram. Now setting generateButton to enabled and updating up JSVGCanvas..");

			outputDiagramJSVGCanvas.setDocumentState(JSVGCanvas.ALWAYS_DYNAMIC);

			// display the generated output diagram on the canvas
			Element root = outputDiagram.getOutputSVGDoc().getDocumentElement();
			outputDiagram.getGenerator().getRoot(root);
			outputDiagramJSVGCanvas.setSVGDocument(outputDiagram.getOutputSVGDoc());

			generateButton.setEnabled(true);
			saveAsMenuItem.setEnabled(true);
		}
	}

	/**
	 * This function gets executed when the Generate Diagram button is pressed.
	 * @param evt The event object associated with this event.
	 */
    private void generateDiagram(java.awt.event.ActionEvent evt)//GEN-FIRST:event_generateDiagram
    {//GEN-HEADEREND:event_generateDiagram
		// disable the button, so our user cannot click it
		generateButton.setEnabled(false);

		try
		{
			GlazerScheduler foyerGlazerScheduler = new GlazerScheduler();
			foyerGlazerScheduler.startDiagramProcessing();
		}
		catch (Exception ex)
		{
			JOptionPane.showMessageDialog(this, ex.toString());
			CGLogger.trace(Level.SEVERE, ex.toString());
		}
    }//GEN-LAST:event_generateDiagram

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveAsMenuItemActionPerformed
    {//GEN-HEADEREND:event_saveAsMenuItemActionPerformed
		// Show dialog to choose where and under which name to save the file
		int returnVal = saveOutputDiagramJFileChooser.showSaveDialog(this);

		// If button "Save" was pressed (not "Cancel")
		if (returnVal == JFileChooser.APPROVE_OPTION)
		{
			// Get the file path and pass it to the method
			// that will perform saving
			java.io.File file = saveOutputDiagramJFileChooser.getSelectedFile();

			try
			{
				// Create the necessary IO facilities
				FileWriter f = new FileWriter(file.getPath());
				PrintWriter writer = new PrintWriter(f);

				// And here our SVG content is actually being written to a file
				DOMUtilities.writeDocument(outputDiagram.getOutputSVGDoc(), writer);

				writer.close();

				CGLogger.trace("File " + file.getAbsolutePath() + " saved successfully.");
			}
			catch (Exception ex)
			{
				JOptionPane.showMessageDialog(this, ex.toString());
				CGLogger.trace(Level.SEVERE, ex.toString());
			}
		}
    }//GEN-LAST:event_saveAsMenuItemActionPerformed
	public static DefaultTreeModel model;
	public static TreePath path;
	public static DefaultMutableTreeNode nNode;
	public static MutableTreeNode node;
	public static MutableTreeNode mNode;

    private void addSiblingJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addSiblingJButtonActionPerformed
    {//GEN-HEADEREND:event_addSiblingJButtonActionPerformed
		// FIXME When we add a sibling to the Root node, a NullPointerException is throw. Just tell the user that u can't add sibling to root. The exception has not been handled.
		model = (DefaultTreeModel) inputTree.getModel();
		String nodeNameStr = JOptionPane.showInputDialog(null, "Enter the node name:");
		if (nodeNameStr.equals(""))
		{
			JOptionPane.showMessageDialog(rootPane, "Please enter the text content of your new node.");
		}
		else
		{

			path = inputTree.getAnchorSelectionPath();//getNextMatch("M", 0, Position.Bias.Forward);

			if (null == path)
			{
				JOptionPane.showMessageDialog(rootPane, "Please select a node, after which you wish to insert a new node.");
				return;
			}

			//path.
			nNode = new DefaultMutableTreeNode(nodeNameStr);
			node = (MutableTreeNode) path.getLastPathComponent();

			int i;

			for (i = 0; i < node.getParent().getChildCount(); i++)
			{
				if (node.toString().equals(node.getParent().getChildAt(i).toString()))
				{
					break;
				}
			}

			model.insertNodeInto(nNode, (MutableTreeNode) node.getParent(), i + 1);
		}
    }//GEN-LAST:event_addSiblingJButtonActionPerformed

        private void addChildButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addChildButtonActionPerformed
        {//GEN-HEADEREND:event_addChildButtonActionPerformed
			model = (DefaultTreeModel) inputTree.getModel();
			String nodeName = JOptionPane.showInputDialog(null, "Enter the node name:");
			if (nodeName.equals(""))
			{
				JOptionPane.showMessageDialog(null, "Node is not added in the tree!");
			}
			else
			{
				//		create a new node
				nNode = new DefaultMutableTreeNode(nodeName);
				path = inputTree.getAnchorSelectionPath();
				node = (MutableTreeNode) path.getLastPathComponent();
				model.insertNodeInto(nNode, node, node.getChildCount());
				//JOptionPane.showMessageDialog(null, "Node are added in the tree!");

			}
        }//GEN-LAST:event_addChildButtonActionPerformed

        private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
        {//GEN-HEADEREND:event_deleteButtonActionPerformed
			try
			{
				path = inputTree.getAnchorSelectionPath();//getNextMatch(nodeName, 0, Position.Bias.Forward);
				mNode = (MutableTreeNode) path.getLastPathComponent();
				model.removeNodeFromParent(mNode);
			}
			catch (Exception ex)
			{
				JOptionPane.showMessageDialog(rootPane, "You cannot delete this node. The input tree must have at least one node.");
			}
        }//GEN-LAST:event_deleteButtonActionPerformed

		private void taskBackgroundColorBlend1JButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_taskBackgroundColorBlend1JButtonActionPerformed
		{//GEN-HEADEREND:event_taskBackgroundColorBlend1JButtonActionPerformed
			Color background = JColorChooser.showDialog(rootPane, "Select Task Background Blend 1 Color", taskBackgroundColorBlend1JButton.getBackground());
			if (background != null)
			{
				taskBackgroundColorBlend1JButton.setBackground(background);
			}
		}//GEN-LAST:event_taskBackgroundColorBlend1JButtonActionPerformed

		private void taskBorderColorJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_taskBorderColorJButtonActionPerformed
		{//GEN-HEADEREND:event_taskBorderColorJButtonActionPerformed
			Color background = JColorChooser.showDialog(rootPane, "Select Task Border Color", taskBorderColorJButton.getBackground());
			if (background != null)
			{
				taskBorderColorJButton.setBackground(background);
			}
		}//GEN-LAST:event_taskBorderColorJButtonActionPerformed

		private void fontColorJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fontColorJButtonActionPerformed
		{//GEN-HEADEREND:event_fontColorJButtonActionPerformed
			Color background = JColorChooser.showDialog(rootPane, "Select Font Color", fontColorJButton.getBackground());
			if (background != null)
			{
				fontColorJButton.setBackground(background);
			}
		}//GEN-LAST:event_fontColorJButtonActionPerformed

		private void taskBackgroundColorBlend2JButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_taskBackgroundColorBlend2JButtonActionPerformed
		{//GEN-HEADEREND:event_taskBackgroundColorBlend2JButtonActionPerformed
			Color background = JColorChooser.showDialog(rootPane, "Select Task Background Blend 2 Color", taskBackgroundColorBlend2JButton.getBackground());
			if (background != null)
			{
				taskBackgroundColorBlend2JButton.setBackground(background);
			}
		}//GEN-LAST:event_taskBackgroundColorBlend2JButtonActionPerformed

		private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
		{//GEN-HEADEREND:event_aboutMenuItemActionPerformed
			final JEditorPane editorPane = new JEditorPane();
			editorPane.setPreferredSize(new Dimension(640, 350));
			editorPane.setEditable(false);
			editorPane.setContentType("text/html");

			editorPane.setText("<html><body>"
					+ "<h1>Chart Glazer</h1><h2>Draw process diagrams, organization charts, cycle diagrams, sequential process diagrams easily! It's a snap to use! Use the diagrams generated by this application in your project reports, presentations and many other places!</h2>"
					+ "<h4>Version 0.6.5 (beta)</h4>"
					+ "<h3>Copyright &copy; 2010</h3><p>Developed by:<b><br />Rishabh Rao (1JS06IS037)<br />Narendra GS (1JS06IS037)<br />Praveen KS (1JS06IS032)</b></p>"
					+ "<p>Created in partial fulfillment of the requirement for the award of <em>Bachelor of Engineering</em> in <b>Information Science & Engineering</b></p>"
					+ "<p>Under the guidance of:<br /><b>Prof. L. Swarnajyothi</b><br />"
					+ "Department of Information Science & Engineering,<br />"
					+ "JSS Academy of Technical Education,<br />"
					+ "Bangalore"
					+ "<br /><a href='http://jssateb.org/'>http://jssateb.org/</a>"
					+ "</p>"
					+ "<p>Project Home: <a href='http://kenai.com/projects/chartglazer'>http://kenai.com/projects/chartglazer</a>"
					+ "<br />Project Issue Tracking (Bugzilla): <a href='http://kenai.com/bugzilla/buglist.cgi?product=chartglazer&order=Importance&limit=25'>http://kenai.com/bugzilla/buglist.cgi?product=chartglazer&order=Importance&limit=25</a></p>"
					+ "<p>This program is free software: you can redistribute it and/or modify "
					+ "it under the terms of the GNU General Public License as published by "
					+ "the Free Software Foundation, either version 3 of the License, or "
					+ "(at your option) any later version.</p>"
					+ "<p>This program is distributed in the hope that it will be useful, "
					+ "but WITHOUT ANY WARRANTY; without even the implied warranty of "
					+ "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the "
					+ "GNU General Public License for more details.</p>"
					+ "<p>You should have received a copy of the GNU General Public License "
					+ "along with this program.  If not, see <a href='http://www.gnu.org/licenses/'>http://www.gnu.org/licenses/</a>.</p>"
					+ "</body></html>");

			// Add Hyperlink listener to process hyperlinks
			editorPane.addHyperlinkListener(new HyperlinkListener()
			{
				public void hyperlinkUpdate(final HyperlinkEvent e)
				{
					if (e.getEventType() == HyperlinkEvent.EventType.ENTERED)
					{
						EventQueue.invokeLater(new Runnable()
						{
							public void run()
							{
								// Show hand cursor
								SwingUtilities.getWindowAncestor(editorPane).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
								// Show URL as the tooltip
								editorPane.setToolTipText(e.getURL().toExternalForm());
							}
						});
					}
					else if (e.getEventType() == HyperlinkEvent.EventType.EXITED)
					{
						EventQueue.invokeLater(new Runnable()
						{
							public void run()
							{
								// Show default cursor
								SwingUtilities.getWindowAncestor(editorPane).setCursor(Cursor.getDefaultCursor());

								// Reset tooltip
								editorPane.setToolTipText(null);
							}
						});
					}
					else if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
					{
						// Starting with JDK6 you can show the URL in desktop browser
						if (Desktop.isDesktopSupported())
						{
							try
							{
								Desktop.getDesktop().browse(e.getURL().toURI());
							}
							catch (Exception ex)
							{
								CGLogger.trace(Level.WARNING, ex.toString());
							}
						}
					}
				}
			});

			editorPane.setCaretPosition(0);
			JOptionPane.showMessageDialog(rootPane, new JScrollPane(editorPane), "Chart Glazer: About", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(ClassLoader.getSystemResource("edu/jss/ise/chartglazer/resources/cglogo.jpg")));
		}//GEN-LAST:event_aboutMenuItemActionPerformed

	/**
	 * @param args the command line arguments.
	 */
	public static void main(String args[])
	{
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{

				new ChartGlazerGUI().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addChildButton;
    private javax.swing.JButton addSiblingJButton;
    private javax.swing.JInternalFrame appearanceJInternalFrame;
    private javax.swing.JLabel blendJLabel;
    private javax.swing.JLabel borderColorJLabel;
    private javax.swing.JLabel borderStrokeWidthJLabel;
    private javax.swing.JSpinner borderStrokeWidthJSpinner;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel diagramDimensionsHeightJLabel;
    private javax.swing.JLabel diagramDimensionsJLabel;
    private javax.swing.JLabel diagramDimensionsWidthJLabel;
    private javax.swing.JSpinner diagramHeightSpinner;
    private javax.swing.JComboBox diagramTypeComboBox;
    private javax.swing.JLabel diagramTypeJLabel;
    private javax.swing.JSpinner diagramWidthSpinner;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fontColorJButton;
    private javax.swing.JLabel fontColorJLabel;
    private javax.swing.JLabel fontFaceJLabel;
    private javax.swing.JComboBox fontSelectionJComboBox;
    private javax.swing.JLabel fontSelectionJLabel;
    private javax.swing.JLabel fontSizeJLabel;
    private javax.swing.JSpinner fontSizeJSpinner;
    private javax.swing.JButton generateButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTree inputTree;
    private javax.swing.JInternalFrame inputTreeJInternalFrame;
    private javax.swing.JScrollPane inputTreeScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nodeBackgroundBlendAndJLabel;
    private javax.swing.JLabel nodeJLabel;
    private org.apache.batik.swing.JSVGCanvas outputDiagramJSVGCanvas;
    private javax.swing.JInternalFrame outputSVGJInternalFrame;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JFileChooser saveOutputDiagramJFileChooser;
    private javax.swing.JScrollPane svgOutputScrollPane;
    private javax.swing.JButton taskBackgroundColorBlend1JButton;
    private javax.swing.JButton taskBackgroundColorBlend2JButton;
    private javax.swing.JButton taskBorderColorJButton;
    private javax.swing.JLabel taskBorderColorJLabel;
    // End of variables declaration//GEN-END:variables
}
